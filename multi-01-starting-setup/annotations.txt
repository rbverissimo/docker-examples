I TOOK A BEAT:

front-end applications exposed by the container doesn't know anything about the network inside of the docker engine. Think about it. 
If, we are running both back and frontends in the same machine, we need to expose the port to the backend in order that the browser can make a request to that order.
In that case, the front-end application doesn't need to be in a network. 
Think about it, a network is a cross-container communication between containers inside the docker engine. If I had multiple backends and databases, that would be the case, to connect 
them all together through a network. But that's not the case with the application that exposes itself via a port and then the browser should make a request to a port of backend that is already
expose.

Mind that

######## THE DOCKERFILE ######

WORKDIR:

The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY, or ADD instructions that follow it in the Dockerfile. 
This directory becomes the base for relative paths within the container.

EXPOSE:

The EXPOSE instruction in a Dockerfile specifies the network ports that the container will listen on. 
It doesn't actually open the ports, but it documents the intended ports for users of the image.

Key points:

Port specification: The EXPOSE instruction takes a list of port numbers as arguments. For example: EXPOSE 80 443.
Documentation only: The EXPOSE instruction doesn't open the ports automatically. 
You need to use the -p flag when running the container to map the container's ports to ports on the host machine.
Multiple ports: You can specify multiple ports in a single EXPOSE instruction.

VOLUME:

The VOLUME instruction in a Dockerfile is used to specify volumes within a container. 
Volumes are directories that persist data outside of the container's file system, allowing you to share data between containers or with the host machine.
When you use the VOLUME instruction in a Dockerfile without specifying a name, it creates an unnamed volume. Unnamed volumes are automatically created and managed by Docker.

Key points:

Data persistence: Volumes persist data even if the container is deleted or stopped.
Shared data: Volumes can be shared between multiple containers.
Configuration: You can configure volumes using the docker volume create command.

Use cases:

Data storage: Store data generated by the container, such as logs, user-generated content, or database files.
Configuration files: Store configuration files that need to be persistent across container restarts.
Shared data: Share data between multiple containers.

###### CREATING VOLUMES ######